using System.Collections.Generic;
using System;
using OfficeOpenXml;
using MathNet.Numerics;
using System.Linq;
using System.Drawing;
using OfficeOpenXml.Style;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Drawing.Chart.Style;
using System.Threading.Tasks;
using OfficeOpenXml.Drawing;
using OfficeOpenXml.Table;
using System.Data;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;
using OfficeOpenXml.FormulaParsing.Excel.Functions;

///
/// Для создания Excel файла используется библиотека EPPlus
///


namespace EvaporationEngine.Calculation
{
    /// <summary>
    /// Класс помощник для расчета энтальпий и удельного объема. Исходник взят из проекта HeatPlatform. HeatPlatform\Models\RefrigerationSystems\PipelinesLogic.cs
    /// </summary>
    /// 
    public class PropertiesHelper
    {
        //Func<double, double> f_ ;
        const int _cDimention2 = 2;
        const int _cDimention3 = 3;
        const int _cDimention = 5;
        /// <summary>
        /// Метод для расчета энтальпии жидкости.
        /// </summary>
        /// <param name="freonName">Название фреона.</param>
        /// <param name="saturatedLiquidTemperature">Температура жидкости (т конденсации + т переохлаждения).</param>
        /// <returns>Энтальпия жидкости.</returns>
        public static double CalculateSaturatedLiquidEnthalpy(string freonName, double saturatedLiquidTemperature)
        {
            double[] X = null, Y = null;

            if (freonName == "R407C")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 45, 50, 55, 60 };
                Y = new double[] { 147.0514881, 149.6662976, 152.2868033, 154.9132284, 157.545798, 160.1847407, 162.8302888, 165.4826795, 168.1421559, 170.8089673, 173.4833705, 176.1656307, 178.8560217, 181.5548275, 184.2623429, 186.9788744, 189.7047416, 192.4402776, 195.1858311, 197.9417669, 200.7084678, 203.4863359, 206.2757946, 209.07729, 211.8912934, 214.7183037, 217.5588494, 220.4134926, 223.282831, 226.1675029, 229, 236.6, 244.3, 252.1, 260.2, 268.4, 276.9, 285.7, 294.8 };
            }
            if (freonName == "R134A")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };
                Y = new double[] { 149.646, 152.142, 154.645, 157.154, 159.669, 162.191, 164.721, 167.257, 169.8, 172.351, 174.909, 177.474, 180.047, 182.628, 185.217, 187.814, 190.419, 193.033, 195.656, 198.287, 200.927, 203.577, 206.236, 208.904, 211.583, 214.272, 216.971, 219.681, 222.402, 225.135, 227.9, 231.4, 235, 238.7, 242.3, 246, 249.7, 253.4, 257.2, 261, 264.8, 268.6, 272.5, 276.4, 280.4, 284.4, 288.4 };
            }
            if (freonName == "R404A")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };
                Y = new double[] { 148.3677149, 150.8768338, 153.3936417, 155.9183836, 158.4513055, 160.9926558, 163.5426865, 166.1016547, 168.6698237, 171.2474645, 173.8348567, 176.4322903, 179.0400669, 181.6585013, 184.2879226, 186.9286768, 189.5811276, 192.2456592, 194.9226781, 197.6126154, 200.31593, 203.0331108, 205.764681, 208.5112011, 211.2732734, 214.0515473, 216.8467244, 219.6595652, 222.4908963, 225.3416194, 228.7, 232.4, 236.2, 240, 243.9, 247.9, 251.9, 255.9, 260, 264.2, 268.5, 272.9, 277.4, 282, 286.8, 291.8, 297 };
            }
            if (freonName == "R507A")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };
                Y = new double[] { 148.6767147, 151.1667829, 153.6647218, 156.1707731, 158.6851794, 161.2081859, 163.740041, 166.2809988, 168.8313197, 171.3912721, 173.9611337, 176.5411933, 179.1317517, 181.7331239, 184.3456402, 186.9696486, 189.6055162, 192.2536317, 194.9144076, 197.5882825, 200.2757248, 202.9772347, 205.693349, 208.4246443, 211.1717422, 213.9353145, 216.7160889, 219.5148567, 222.3324804, 225.1699037, 228.8, 232.5, 236.3, 240.1, 244, 247.9, 251.9, 255.9, 260, 264.2, 268.5, 272.9, 277.4, 282.1, 287, 292.2, 297.8 };
            }
            if (freonName == "R410A")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };
                Y = new double[] { 143.8009149, 146.542833, 149.2911182, 152.0461327, 154.8082486, 157.5778479, 160.3553232, 163.1410788, 165.9355314, 168.7391106, 171.5522608, 174.3754413, 177.2091282, 180.0538157, 182.9100175, 185.7782683, 188.6591263, 191.5531746, 194.4610243, 197.3833165, 200.3207258, 203.2739635, 206.2437817, 209.2309774, 212.2363981, 215.2609471, 218.3055907, 221.3713661, 224.4593902, 227.5708711, 231.3, 235.4, 239.5, 243.7, 248, 252.3, 256.7, 261.2, 265.7, 270.4, 275.2, 280, 285.1, 290.3, 295.7, 301.3, 307.3 };
            }
            if (freonName == "R22")
            {
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };
                Y = new double[] { 156.709517, 158.8702616, 161.0354732, 163.2053702, 165.3801715, 167.5600967, 169.745366, 171.9362004, 174.132822, 176.3354536, 178.5443195, 180.7596455, 182.9816592, 185.2105903, 187.4466714, 189.6901379, 191.9412289, 194.2001878, 196.4672627, 198.7427075, 201.0267825, 203.3197554, 205.6219023, 207.933509, 210.2548721, 212.5863005, 214.9281172, 217.2806606, 219.644287, 222.0193724, 524, 527.1, 530.3, 533.4, 536.6, 539.8, 543, 546.3, 549.6, 552.9, 556.3, 559.7, 563.1, 566.6, 570.1, 573.7, 577.4 };
                Func<double, double> f_ = GetSpline(X, Y);

                return f_ != null ? f_(saturatedLiquidTemperature) : 0;
            }

            var f = X != null && Y != null && X.Length > _cDimention2 ? Fit.PolynomialFunc(X, Y, _cDimention2) : null;
            
            return f != null ? f(saturatedLiquidTemperature) : 0;
        }

        /// <summary>
        /// Метод для расчета энтальпии газа.
        /// </summary>
        /// <param name="freonName">Название фреона.</param>
        /// <param name="wetGasTemperature">Температура газа (т кипения + т перегрева).</param>
        /// <param name="wetGasPressure">Давление газа.</param>
        /// <returns>Энтальпия газа.</returns>
        public static double CalculateWetGasEnthalpy(string freonName, double wetGasTemperature, double wetGasPressure)
        {
            Dictionary<double, Dictionary<double, double>> dx = null; // давление

            if (freonName == "R407C")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 0.505, new Dictionary<double, double>() { {-50 , 381.3}, {-40 , 388.6}, {-30 , 396.1}, {-20 , 403.6}, {-10 , 411.3}, {0 , 419.1}, {10 , 427.1}, {20 , 435.3 } }},
                    { 0.861, new Dictionary<double, double>() { {-39 , 388}, {-29 , 395.6}, {-19 , 403.3}, {-9 , 411.2}, {1 , 419.1}, {11 , 427.2}, {21 , 435.4}, {31 , 443.8 } }},
                    { 1.392, new Dictionary<double, double>() { {-29 , 393.8}, {-19 , 401.8}, {-9 , 409.8}, {1 , 417.9}, {11 , 426.1}, {21 , 434.5}, {31 , 442.9}, {41 , 451.5 } }},
                    { 2.153, new Dictionary<double, double>() { {-19 , 399.4}, {-9 , 407.7}, {1 , 416.1}, {11 , 424.5}, {21 , 433}, {31 , 441.6}, {41 , 450.4}, {51 , 459.2 } }},
                    { 3.204, new Dictionary<double, double>() { {-9 , 404.7}, {1 , 413.5}, {11 , 422.2}, {21 , 431}, {31 , 439.8}, {41 , 448.7}, {51 , 457.7}, {61 , 466.8 } }},
                    { 4.611, new Dictionary<double, double>() { {1 , 409.8}, {11 , 419}, {21 , 428.2}, {31 , 437.3}, {41 , 446.5}, {51 , 455.7}, {61 , 465}, {71 , 474.4 } }},
                    { 6.448, new Dictionary<double, double>() { {11 , 414.4}, {21 , 424.2}, {31 , 433.8}, {41 , 443.4}, {51 , 453}, {61 , 462.5}, {71 , 472.1}, {81 , 481.8 } }},
                    { 8.796, new Dictionary<double, double>() { {21 , 418.6}, {31 , 429}, {41 , 439.2}, {51 , 449.2}, {61 , 459.2}, {71 , 469.1}, {81 , 479.1}, {91 , 489 } }}
                };
            }
            if (freonName == "R134A")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 0.295, new Dictionary<double, double>() { {-50 , 367.2}, {-45 , 370.8}, {-40 , 374.5}, {-35 , 378.2}, {-30 , 381.9}, {-25 , 385.7}, {-20 , 389.6}, {-15 , 393.4}, {-10 , 397.4}, {-5 , 401.4}, {0 , 405.4}, {5 , 409.5}, {10 , 413.6}, {15 , 417.7}, {20 , 422 } }},
                    { 0.391, new Dictionary<double, double>() { {-45 , 370.4}, {-40 , 374.1}, {-35 , 377.8}, {-30 , 381.6}, {-25 , 385.4}, {-20 , 389.3}, {-15 , 393.2}, {-10 , 397.1}, {-5 , 401.1}, {0 , 405.2}, {5 , 409.2}, {10 , 413.4}, {15 , 417.6}, {20 , 421.8}, {25 , 426 } }},
                    { 0.512, new Dictionary<double, double>() { {-40 , 373.6}, {-35 , 377.4}, {-30 , 381.2}, {-25 , 385}, {-20 , 388.9}, {-15 , 392.8}, {-10 , 396.8}, {-5 , 400.8}, {0 , 404.9}, {5 , 409}, {10 , 413.1}, {15 , 417.3}, {20 , 421.5}, {25 , 425.8}, {30 , 430.1 } }},
                    { 0.661, new Dictionary<double, double>() { {-35 , 376.8}, {-30 , 380.7}, {-25 , 384.5}, {-20 , 388.5}, {-15 , 392.4}, {-10 , 396.4}, {-5 , 400.4}, {0 , 404.5}, {5 , 408.6}, {10 , 412.8}, {15 , 417}, {20 , 421.3}, {25 , 425.5}, {30 , 429.9}, {35 , 434.3 } }},
                    { 0.844, new Dictionary<double, double>() { {-30 , 380}, {-25 , 383.9}, {-20 , 387.9}, {-15 , 391.9}, {-10 , 395.9}, {-5 , 400}, {0 , 404.1}, {5 , 408.2}, {10 , 412.4}, {15 , 416.6}, {20 , 420.9}, {25 , 425.2}, {30 , 429.6}, {35 , 434}, {40 , 438.4 } }},
                    { 1.064, new Dictionary<double, double>() { {-25 , 383.2}, {-20 , 387.2}, {-15 , 391.2}, {-10 , 395.3}, {-5 , 399.4}, {0 , 403.5}, {5 , 407.7}, {10 , 411.9}, {15 , 416.2}, {20 , 420.5}, {25 , 424.8}, {30 , 429.2}, {35 , 433.6}, {40 , 438}, {45 , 442.5 } }},
                    { 1.327, new Dictionary<double, double>() { {-20 , 386.4}, {-15 , 390.4}, {-10 , 394.5}, {-5 , 398.7}, {0 , 402.9}, {5 , 407.1}, {10 , 411.3}, {15 , 415.6}, {20 , 419.9}, {25 , 424.3}, {30 , 428.7}, {35 , 433.1}, {40 , 437.6}, {45 , 442.1}, {50 , 446.7 } }},
                    { 1.64, new Dictionary<double, double>()  { {-15 , 389.5}, {-10 , 393.6}, {-5 , 397.8}, {0 , 402.1}, {5 , 406.3}, {10 , 410.6}, {15 , 415}, {20 , 419.3}, {25 , 423.7}, {30 , 428.1}, {35 , 432.6}, {40 , 437.1}, {45 , 441.6}, {50 , 446.2}, {55 , 450.8 } }},
                    { 2.006, new Dictionary<double, double>() { {-10 , 392.6}, {-5 , 396.8}, {0 , 401.1}, {5 , 405.4}, {10 , 409.8}, {15 , 414.2}, {20 , 418.6}, {25 , 423}, {30 , 427.5}, {35 , 432}, {40 , 436.5}, {45 , 441.1}, {50 , 445.7}, {55 , 450.3}, {60 , 455 } }},
                    { 2.434, new Dictionary<double, double>() { {-5 , 395.6}, {0 , 400}, {5 , 404.4}, {10 , 408.8}, {15 , 413.2}, {20 , 417.7}, {25 , 422.1}, {30 , 426.7}, {35 , 431.2}, {40 , 435.8}, {45 , 440.4}, {50 , 445}, {55 , 449.7}, {60 , 454.4}, {65 , 459.2 } }},
                    { 2.929, new Dictionary<double, double>() { {0 , 398.6}, {5 , 403.1}, {10 , 407.6}, {15 , 412.1}, {20 , 416.6}, {25 , 421.1}, {30 , 425.7}, {35 , 430.3}, {40 , 434.9}, {45 , 439.6}, {50 , 444.3}, {55 , 449}, {60 , 453.7}, {65 , 458.5}, {70 , 463.3 } }},
                    { 3.498, new Dictionary<double, double>() { {5 , 401.6}, {10 , 406.2}, {15 , 410.8}, {20 , 415.4}, {25 , 420}, {30 , 424.6}, {35 , 429.3}, {40 , 433.9}, {45 , 438.6}, {50 , 443.4}, {55 , 448.1}, {60 , 452.9}, {65 , 457.7}, {70 , 462.6}, {75 , 467.4 } }},
                    { 4.147, new Dictionary<double, double>() { {10 , 404.5}, {15 , 409.2}, {20 , 413.9}, {25 , 418.6}, {30 , 423.3}, {35 , 428}, {40 , 432.8}, {45 , 437.5}, {50 , 442.3}, {55 , 447.1}, {60 , 452}, {65 , 456.8}, {70 , 461.7}, {75 , 466.6}, {80 , 471.6 } }},
                    { 4.885, new Dictionary<double, double>() { {15 , 407.3}, {20 , 412.1}, {25 , 417}, {30 , 421.8}, {35 , 426.6}, {40 , 431.4}, {45 , 436.3}, {50 , 441.1}, {55 , 446}, {60 , 450.9}, {65 , 455.8}, {70 , 460.7}, {75 , 465.7}, {80 , 470.6}, {85 , 475.7 } }},
                    { 5.718, new Dictionary<double, double>() { {20 , 410.1}, {25 , 415}, {30 , 420}, {35 , 424.9}, {40 , 429.8}, {45 , 434.8}, {50 , 439.7}, {55 , 444.6}, {60 , 449.6}, {65 , 454.6}, {70 , 459.6}, {75 , 464.6}, {80 , 469.6}, {85 , 474.7}, {90 , 479.7 } }}
                };
            }
            if (freonName == "R404A")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 0.823, new Dictionary<double, double>() { {-50 , 337}, {-45 , 340.8}, {-40 , 344.7}, {-35 , 348.6}, {-30 , 352.5}, {-25 , 356.5}, {-20 , 360.5}, {-15 , 364.5}, {-10 , 368.6}, {-5 , 372.7}, {0 , 376.8}, {5 , 381}, {10 , 385.2}, {15 , 389.5}, {20 , 393.8 } }},
                    { 1.052, new Dictionary<double, double>() { {-45 , 340.1}, {-40 , 344}, {-35 , 347.9}, {-30 , 351.9}, {-25 , 355.9}, {-20 , 359.9}, {-15 , 364}, {-10 , 368.1}, {-5 , 372.2}, {0 , 376.4}, {5 , 380.6}, {10 , 384.8}, {15 , 389.1}, {20 , 393.5}, {25 , 397.8 } }},
                    { 1.327, new Dictionary<double, double>() { {-40 , 343.1}, {-35 , 347.1}, {-30 , 351.1}, {-25 , 355.1}, {-20 , 359.2}, {-15 , 363.3}, {-10 , 367.5}, {-5 , 371.6}, {0 , 375.8}, {5 , 380.1}, {10 , 384.4}, {15 , 388.7}, {20 , 393}, {25 , 397.4}, {30 , 401.8 } }},
                    { 1.656, new Dictionary<double, double>() { {-35 , 346}, {-30 , 350.1}, {-25 , 354.2}, {-20 , 358.4}, {-15 , 362.5}, {-10 , 366.7}, {-5 , 370.9}, {0 , 375.2}, {5 , 379.5}, {10 , 383.8}, {15 , 388.1}, {20 , 392.5}, {25 , 396.9}, {30 , 401.4}, {35 , 405.9 } }},
                    { 2.045, new Dictionary<double, double>() { {-30 , 349}, {-25 , 353.2}, {-20 , 357.4}, {-15 , 361.6}, {-10 , 365.8}, {-5 , 370.1}, {0 , 374.4}, {5 , 378.7}, {10 , 383.1}, {15 , 387.5}, {20 , 391.9}, {25 , 396.3}, {30 , 400.8}, {35 , 405.3}, {40 , 409.9 } }},
                    { 2.5, new Dictionary<double, double>() { {-25 , 351.9}, {-20 , 356.1}, {-15 , 360.5}, {-10 , 364.8}, {-5 , 369.1}, {0 , 373.5}, {5 , 377.9}, {10 , 382.3}, {15 , 386.7}, {20 , 391.1}, {25 , 395.6}, {30 , 400.2}, {35 , 404.7}, {40 , 409.3}, {45 , 413.9 } }},
                    { 3.03, new Dictionary<double, double>() { {-20 , 354.7}, {-15 , 359.1}, {-10 , 363.5}, {-5 , 367.9}, {0 , 372.4}, {5 , 376.8}, {10 , 381.3}, {15 , 385.8}, {20 , 390.3}, {25 , 394.8}, {30 , 399.4}, {35 , 404}, {40 , 408.6}, {45 , 413.2}, {50 , 417.9 } }},
                    { 3.64, new Dictionary<double, double>() { {-15 , 357.4}, {-10 , 362}, {-5 , 366.5}, {0 , 371}, {5 , 375.6}, {10 , 380.1}, {15 , 384.7}, {20 , 389.2}, {25 , 393.8}, {30 , 398.4}, {35 , 403.1}, {40 , 407.7}, {45 , 412.4}, {50 , 417.2}, {55 , 421.9 } }},
                    { 4.342, new Dictionary<double, double>() { {-10 , 360.1}, {-5 , 364.8}, {0 , 369.5}, {5 , 374.1}, {10 , 378.7}, {15 , 383.4}, {20 , 388}, {25 , 392.7}, {30 , 397.4}, {35 , 402.1}, {40 , 406.8}, {45 , 411.5}, {50 , 416.3}, {55 , 421.1}, {60 , 425.9 } }},
                    { 5.14, new Dictionary<double, double>() { {-5 , 362.8}, {0 , 367.6}, {5 , 372.3}, {10 , 377.1}, {15 , 381.8}, {20 , 386.6}, {25 , 391.3}, {30 , 396.1}, {35 , 400.9}, {40 , 405.6}, {45 , 410.4}, {50 , 415.3}, {55 , 420.1}, {60 , 425}, {65 , 429.8 } }},
                    { 6.043, new Dictionary<double, double>() { {0 , 365.3}, {5 , 370.3}, {10 , 375.2}, {15 , 380.1}, {20 , 384.9}, {25 , 389.8}, {30 , 394.6}, {35 , 399.5}, {40 , 404.3}, {45 , 409.2}, {50 , 414.1}, {55 , 419}, {60 , 423.9}, {65 , 428.8}, {70 , 433.8 } }},
                    { 7.061, new Dictionary<double, double>() { {5 , 367.7}, {10 , 372.9}, {15 , 377.9}, {20 , 382.9}, {25 , 387.9}, {30 , 392.9}, {35 , 397.8}, {40 , 402.8}, {45 , 407.8}, {50 , 412.7}, {55 , 417.7}, {60 , 422.7}, {65 , 427.7}, {70 , 432.7}, {75 , 437.7 } }},
                    { 8.201, new Dictionary<double, double>() { {10 , 370.1}, {15 , 375.4}, {20 , 380.6}, {25 , 385.7}, {30 , 390.9}, {35 , 396}, {40 , 401}, {45 , 406.1}, {50 , 411.1}, {55 , 416.2}, {60 , 421.2}, {65 , 426.3}, {70 , 431.4}, {75 , 436.5}, {80 , 441.6 } }},
                    { 9.473, new Dictionary<double, double>() { {15 , 372.3}, {20 , 377.8}, {25 , 383.2}, {30 , 388.5}, {35 , 393.7}, {40 , 399}, {45 , 404.1}, {50 , 409.3}, {55 , 414.5}, {60 , 419.6}, {65 , 424.8}, {70 , 429.9}, {75 , 435.1}, {80 , 440.3}, {85 , 445.4 } }},
                    { 10.89, new Dictionary<double, double>() { {20 , 374.3}, {25 , 380}, {30 , 385.6}, {35 , 391.1}, {40 , 396.5}, {45 , 401.9}, {50 , 407.2}, {55 , 412.5}, {60 , 417.8}, {65 , 423}, {70 , 428.3}, {75 , 433.5}, {80 , 438.7}, {85 , 444}, {90 , 449.3 } }}
                };
            }
            if (freonName == "R507A")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 0.880, new Dictionary<double, double>() { {-50 , 333.6}, {-45 , 337.4}, {-40 , 341.3}, {-35 , 345.1}, {-30 , 349.1}, {-25 , 353}, {-20 , 357}, {-15 , 361}, {-10 , 365}, {-5 , 369.1}, {0 , 373.3}, {5 , 377.4}, {10 , 381.6}, {15 , 385.9}, {20 , 390.2 } }},
                    { 1.119, new Dictionary<double, double>() { {-45 , 336.6}, {-40 , 340.5}, {-35 , 344.4}, {-30 , 348.4}, {-25 , 352.4}, {-20 , 356.4}, {-15 , 360.5}, {-10 , 364.5}, {-5 , 368.7}, {0 , 372.8}, {5 , 377}, {10 , 381.2}, {15 , 385.5}, {20 , 389.8}, {25 , 394.2 } }},
                    { 1.408, new Dictionary<double, double>() { {-40 , 339.6}, {-35 , 343.6}, {-30 , 347.6}, {-25 , 351.6}, {-20 , 355.7}, {-15 , 359.8}, {-10 , 363.9}, {-5 , 368.1}, {0 , 372.3}, {5 , 376.5}, {10 , 380.8}, {15 , 385.1}, {20 , 389.4}, {25 , 393.8}, {30 , 398.2 } }},
                    { 1.751, new Dictionary<double, double>() { {-35 , 342.5}, {-30 , 346.6}, {-25 , 350.7}, {-20 , 354.9}, {-15 , 359}, {-10 , 363.2}, {-5 , 367.4}, {0 , 371.6}, {5 , 375.9}, {10 , 380.2}, {15 , 384.5}, {20 , 388.9}, {25 , 393.3}, {30 , 397.7}, {35 , 402.2 } }},
                    { 2.156, new Dictionary<double, double>() { {-30 , 345.4}, {-25 , 349.6}, {-20 , 353.8}, {-15 , 358}, {-10 , 362.3}, {-5 , 366.5}, {0 , 370.8}, {5 , 375.1}, {10 , 379.5}, {15 , 383.8}, {20 , 388.2}, {25 , 392.7}, {30 , 397.1}, {35 , 401.6}, {40 , 406.2 } }},
                    { 2.630, new Dictionary<double, double>() { {-25 , 348.3}, {-20 , 352.6}, {-15 , 356.9}, {-10 , 361.2}, {-5 , 365.5}, {0 , 369.9}, {5 , 374.2}, {10 , 378.6}, {15 , 383}, {20 , 387.5}, {25 , 391.9}, {30 , 396.4}, {35 , 401}, {40 , 405.5}, {45 , 410.1 } }},
                    { 3.179, new Dictionary<double, double>() { {-20 , 351.1}, {-15 , 355.5}, {-10 , 359.9}, {-5 , 364.3}, {0 , 368.7}, {5 , 373.2}, {10 , 377.6}, {15 , 382.1}, {20 , 386.6}, {25 , 391.1}, {30 , 395.7}, {35 , 400.2}, {40 , 404.8}, {45 , 409.5}, {50 , 414.1 } }},
                    { 3.813, new Dictionary<double, double>() { {-15 , 353.8}, {-10 , 358.4}, {-5 , 362.9}, {0 , 367.4}, {5 , 371.9}, {10 , 376.4}, {15 , 381}, {20 , 385.5}, {25 , 390.1}, {30 , 394.7}, {35 , 399.3}, {40 , 404}, {45 , 408.7}, {50 , 413.3}, {55 , 418.1 } }},
                    { 4.538, new Dictionary<double, double>() { {-10 , 356.5}, {-5 , 361.2}, {0 , 365.8}, {5 , 370.4}, {10 , 375.1}, {15 , 379.7}, {20 , 384.3}, {25 , 389}, {30 , 393.6}, {35 , 398.3}, {40 , 403}, {45 , 407.7}, {50 , 412.5}, {55 , 417.2}, {60 , 422 } }},
                    { 5.363, new Dictionary<double, double>() { {-5 , 359.1}, {0 , 363.9}, {5 , 368.7}, {10 , 373.4}, {15 , 378.1}, {20 , 382.9}, {25 , 387.6}, {30 , 392.4}, {35 , 397.1}, {40 , 401.9}, {45 , 406.6}, {50 , 411.4}, {55 , 416.3}, {60 , 421.1}, {65 , 426 } }},
                    { 6.295, new Dictionary<double, double>() { {0 , 361.6}, {5 , 366.5}, {10 , 371.4}, {15 , 376.3}, {20 , 381.2}, {25 , 386}, {30 , 390.9}, {35 , 395.7}, {40 , 400.5}, {45 , 405.4}, {50 , 410.2}, {55 , 415.1}, {60 , 420}, {65 , 424.9}, {70 , 429.9 } }},
                    { 7.344, new Dictionary<double, double>() { {5 , 364}, {10 , 369.1}, {15 , 374.2}, {20 , 379.2}, {25 , 384.2}, {30 , 389.1}, {35 , 394.1}, {40 , 399}, {45 , 403.9}, {50 , 408.9}, {55 , 413.8}, {60 , 418.8}, {65 , 423.8}, {70 , 428.7}, {75 , 433.8 } }},
                    { 8.518, new Dictionary<double, double>() { {10 , 366.3}, {15 , 371.6}, {20 , 376.8}, {25 , 382}, {30 , 387.1}, {35 , 392.2}, {40 , 397.2}, {45 , 402.3}, {50 , 407.3}, {55 , 412.3}, {60 , 417.4}, {65 , 422.4}, {70 , 427.5}, {75 , 432.5}, {80 , 437.6 } }},
                    { 9.826, new Dictionary<double, double>() { {15 , 368.4}, {20 , 373.9}, {25 , 379.3}, {30 , 384.7}, {35 , 389.9}, {40 , 395.1}, {45 , 400.3}, {50 , 405.5}, {55 , 410.6}, {60 , 415.7}, {65 , 420.9}, {70 , 426}, {75 , 431.1}, {80 , 436.3}, {85 , 441.4 } }},
                    { 11.28, new Dictionary<double, double>() { {20 , 370.5}, {25 , 376.2}, {30 , 381.8}, {35 , 387.3}, {40 , 392.7}, {45 , 398}, {50 , 403.3}, {55 , 408.6}, {60 , 413.9}, {65 , 419.1}, {70 , 424.3}, {75 , 429.5}, {80 , 434.8}, {85 , 440}, {90 , 445.2 } }}
                };
            }
            if (freonName == "R410A")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 1.095, new Dictionary<double, double>() { {-50 , 399.5}, {-45 , 403.4}, {-40 , 407.3}, {-35 , 411.1}, {-30 , 415}, {-25 , 418.9}, {-20 , 422.8}, {-15 , 426.7}, {-10 , 430.7}, {-5 , 434.6}, {0 , 438.6}, {5 , 442.6}, {10 , 446.6}, {15 , 450.7}, {20 , 454.8 } }},
                    { 1.396, new Dictionary<double, double>() { {-45 , 402.2}, {-40 , 406.1}, {-35 , 410.1}, {-30 , 414}, {-25 , 418}, {-20 , 421.9}, {-15 , 425.9}, {-10 , 429.9}, {-5 , 433.9}, {0 , 437.9}, {5 , 442}, {10 , 446}, {15 , 450.1}, {20 , 454.3}, {25 , 458.4 } }},
                    { 1.759, new Dictionary<double, double>() { {-40 , 404.7}, {-35 , 408.7}, {-30 , 412.8}, {-25 , 416.8}, {-20 , 420.9}, {-15 , 424.9}, {-10 , 429}, {-5 , 433}, {0 , 437.1}, {5 , 441.2}, {10 , 445.3}, {15 , 449.4}, {20 , 453.6}, {25 , 457.8}, {30 , 462 } }},
                    { 2.191, new Dictionary<double, double>() { {-35 , 407.1}, {-30 , 411.3}, {-25 , 415.4}, {-20 , 419.6}, {-15 , 423.7}, {-10 , 427.8}, {-5 , 432}, {0 , 436.1}, {5 , 440.3}, {10 , 444.4}, {15 , 448.6}, {20 , 452.8}, {25 , 457}, {30 , 461.3}, {35 , 465.5 } }},
                    { 2.702, new Dictionary<double, double>() { {-30 , 409.4}, {-25 , 413.7}, {-20 , 418}, {-15 , 422.2}, {-10 , 426.5}, {-5 , 430.7}, {0 , 434.9}, {5 , 439.1}, {10 , 443.4}, {15 , 447.6}, {20 , 451.9}, {25 , 456.2}, {30 , 460.4}, {35 , 464.7}, {40 , 469.1 } }},
                    { 3.301, new Dictionary<double, double>() { {-25 , 411.6}, {-20 , 416.1}, {-15 , 420.4}, {-10 , 424.8}, {-5 , 429.1}, {0 , 433.5}, {5 , 437.8}, {10 , 442.1}, {15 , 446.4}, {20 , 450.8}, {25 , 455.1}, {30 , 459.4}, {35 , 463.8}, {40 , 468.2}, {45 , 472.6 } }},
                    { 3.998, new Dictionary<double, double>() { {-20 , 413.8}, {-15 , 418.3}, {-10 , 422.8}, {-5 , 427.3}, {0 , 431.8}, {5 , 436.2}, {10 , 440.6}, {15 , 445}, {20 , 449.4}, {25 , 453.9}, {30 , 458.3}, {35 , 462.7}, {40 , 467.1}, {45 , 471.6}, {50 , 476.1 } }},
                    { 4.802, new Dictionary<double, double>() { {-15 , 415.8}, {-10 , 420.5}, {-5 , 425.1}, {0 , 429.7}, {5 , 434.3}, {10 , 438.8}, {15 , 443.4}, {20 , 447.9}, {25 , 452.4}, {30 , 456.9}, {35 , 461.4}, {40 , 465.9}, {45 , 470.4}, {50 , 474.9}, {55 , 479.5 } }},
                    { 5.724, new Dictionary<double, double>() { {-10 , 417.6}, {-5 , 422.5}, {0 , 427.3}, {5 , 432}, {10 , 436.7}, {15 , 441.4}, {20 , 446}, {25 , 450.7}, {30 , 455.3}, {35 , 459.9}, {40 , 464.5}, {45 , 469}, {50 , 473.6}, {55 , 478.3}, {60 , 482.9 } }},
                    { 6.775, new Dictionary<double, double>() { {-5 , 419.3}, {0 , 424.4}, {5 , 429.4}, {10 , 434.3}, {15 , 439.1}, {20 , 443.9}, {25 , 448.7}, {30 , 453.4}, {35 , 458.1}, {40 , 462.8}, {45 , 467.5}, {50 , 472.1}, {55 , 476.8}, {60 , 481.5}, {65 , 486.2 } }},
                    { 7.967, new Dictionary<double, double>() { {0 , 420.9}, {5 , 426.2}, {10 , 431.3}, {15 , 436.4}, {20 , 441.4}, {25 , 446.3}, {30 , 451.2}, {35 , 456}, {40 , 460.8}, {45 , 465.6}, {50 , 470.4}, {55 , 475.2}, {60 , 480}, {65 , 484.7}, {70 , 489.5 } }},
                    { 9.311, new Dictionary<double, double>() { {5 , 422.3}, {10 , 427.8}, {15 , 433.1}, {20 , 438.4}, {25 , 443.5}, {30 , 448.6}, {35 , 453.6}, {40 , 458.6}, {45 , 463.5}, {50 , 468.4}, {55 , 473.3}, {60 , 478.2}, {65 , 483}, {70 , 487.9}, {75 , 492.7 } }},
                    { 10.82, new Dictionary<double, double>() { {10 , 423.6}, {15 , 429.3}, {20 , 434.8}, {25 , 440.3}, {30 , 445.6}, {35 , 450.8}, {40 , 455.9}, {45 , 461}, {50 , 466.1}, {55 , 471.1}, {60 , 476.1}, {65 , 481.1}, {70 , 486}, {75 , 491}, {80 , 495.9 } }},
                    { 12.51, new Dictionary<double, double>() { {15 , 424.6}, {20 , 430.6}, {25 , 436.4}, {30 , 442}, {35 , 447.5}, {40 , 452.9}, {45 , 458.2}, {50 , 463.4}, {55 , 468.6}, {60 , 473.7}, {65 , 478.8}, {70 , 483.9}, {75 , 488.9}, {80 , 494}, {85 , 499 } }},
                    { 14.38, new Dictionary<double, double>() { {20 , 425.4}, {25 , 431.7}, {30 , 437.7}, {35 , 443.6}, {40 , 449.3}, {45 , 454.8}, {50 , 460.3}, {55 , 465.7}, {60 , 471}, {65 , 476.2}, {70 , 481.5}, {75 , 486.6}, {80 , 491.8}, {85 , 496.9}, {90 , 502.1 } }}
                };
            }
            if (freonName == "R22")
            {
                dx = new Dictionary<double, Dictionary<double, double>>()
                {
                    { 0.644, new Dictionary<double, double>() { {-50 , 684}, {-45 , 686.9}, {-40 , 689.8}, {-35 , 692.8}, {-30 , 695.8}, {-25 , 698.8}, {-20 , 701.8}, {-15 , 704.9}, {-10 , 707.9}, {-5 , 711.1}, {0 , 714.2}, {5 , 717.4}, {10 , 720.6}, {15 , 723.8}, {20 , 727 } }},
                    { 0.827, new Dictionary<double, double>() { {-45 , 686.4}, {-40 , 689.3}, {-35 , 692.3}, {-30 , 695.3}, {-25 , 698.3}, {-20 , 701.4}, {-15 , 704.5}, {-10 , 707.6}, {-5 , 710.7}, {0 , 713.9}, {5 , 717}, {10 , 720.2}, {15 , 723.5}, {20 , 726.7}, {25 , 730 } }},
                    { 1.049, new Dictionary<double, double>() { {-40 , 688.7}, {-35 , 691.7}, {-30 , 694.8}, {-25 , 697.8}, {-20 , 700.9}, {-15 , 704}, {-10 , 707.1}, {-5 , 710.3}, {0 , 713.4}, {5 , 716.6}, {10 , 719.9}, {15 , 723.1}, {20 , 726.4}, {25 , 729.7}, {30 , 733 } }},
                    { 1.316, new Dictionary<double, double>() { {-35 , 691}, {-30 , 694.1}, {-25 , 697.2}, {-20 , 700.3}, {-15 , 703.4}, {-10 , 706.6}, {-5 , 709.8}, {0 , 713}, {5 , 716.2}, {10 , 719.4}, {15 , 722.7}, {20 , 726}, {25 , 729.3}, {30 , 732.6}, {35 , 736 } }},
                    { 1.634, new Dictionary<double, double>() { {-30 , 693.2}, {-25 , 696.4}, {-20 , 699.5}, {-15 , 702.7}, {-10 , 705.9}, {-5 , 709.1}, {0 , 712.4}, {5 , 715.6}, {10 , 718.9}, {15 , 722.2}, {20 , 725.5}, {25 , 728.8}, {30 , 732.2}, {35 , 735.6}, {40 , 739 } }},
                    { 2.009, new Dictionary<double, double>() { {-25 , 695.5}, {-20 , 698.7}, {-15 , 701.9}, {-10 , 705.1}, {-5 , 708.4}, {0 , 711.6}, {5 , 714.9}, {10 , 718.2}, {15 , 721.6}, {20 , 724.9}, {25 , 728.3}, {30 , 731.7}, {35 , 735.1}, {40 , 738.5}, {45 , 742 } }},
                    { 2.447, new Dictionary<double, double>() { {-20 , 697.6}, {-15 , 700.9}, {-10 , 704.2}, {-5 , 707.5}, {0 , 710.8}, {5 , 714.1}, {10 , 717.5}, {15 , 720.8}, {20 , 724.2}, {25 , 727.6}, {30 , 731}, {35 , 734.5}, {40 , 737.9}, {45 , 741.4}, {50 , 744.9 } }},
                    { 2.956, new Dictionary<double, double>() { {-15 , 699.7}, {-10 , 703}, {-5 , 706.4}, {0 , 709.8}, {5 , 713.2}, {10 , 716.6}, {15 , 720}, {20 , 723.4}, {25 , 726.8}, {30 , 730.3}, {35 , 733.7}, {40 , 737.2}, {45 , 740.7}, {50 , 744.3}, {55 , 747.8 } }},
                    { 3.542, new Dictionary<double, double>() { {-10 , 701.7}, {-5 , 705.1}, {0 , 708.6}, {5 , 712}, {10 , 715.5}, {15 , 719}, {20 , 722.4}, {25 , 725.9}, {30 , 729.4}, {35 , 732.9}, {40 , 736.4}, {45 , 740}, {50 , 743.5}, {55 , 747.1}, {60 , 750.7 } }},
                    { 4.212, new Dictionary<double, double>() { {-5 , 703.7}, {0 , 707.2}, {5 , 710.7}, {10 , 714.2}, {15 , 717.8}, {20 , 721.3}, {25 , 724.8}, {30 , 728.4}, {35 , 731.9}, {40 , 735.5}, {45 , 739.1}, {50 , 742.7}, {55 , 746.3}, {60 , 750}, {65 , 753.6 } }},
                    { 4.974, new Dictionary<double, double>() { {0 , 705.6}, {5 , 709.2}, {10 , 712.8}, {15 , 716.4}, {20 , 720}, {25 , 723.6}, {30 , 727.2}, {35 , 730.8}, {40 , 734.4}, {45 , 738.1}, {50 , 741.7}, {55 , 745.4}, {60 , 749.1}, {65 , 752.7}, {70 , 756.4 } }},
                    { 5.836, new Dictionary<double, double>() { {5 , 707.3}, {10 , 711.1}, {15 , 714.8}, {20 , 718.5}, {25 , 722.2}, {30 , 725.8}, {35 , 729.5}, {40 , 733.2}, {45 , 736.9}, {50 , 740.6}, {55 , 744.3}, {60 , 748}, {65 , 751.8}, {70 , 755.5}, {75 , 759.3 } }},
                    { 6.805, new Dictionary<double, double>() { {10 , 709.1}, {15 , 712.9}, {20 , 716.7}, {25 , 720.5}, {30 , 724.3}, {35 , 728}, {40 , 731.8}, {45 , 735.6}, {50 , 739.3}, {55 , 743.1}, {60 , 746.9}, {65 , 750.6}, {70 , 754.4}, {75 , 758.2}, {80 , 762 } }},
                    { 7.889, new Dictionary<double, double>() { {15 , 710.7}, {20 , 714.6}, {25 , 718.5}, {30 , 722.4}, {35 , 726.3}, {40 , 730.1}, {45 , 734}, {50 , 737.8}, {55 , 741.7}, {60 , 745.5}, {65 , 749.4}, {70 , 753.2}, {75 , 757.1}, {80 , 760.9}, {85 , 764.8 } }},
                    { 9.097, new Dictionary<double, double>() { {20 , 712.2}, {25 , 716.2}, {30 , 720.3}, {35 , 724.3}, {40 , 728.2}, {45 , 732.2}, {50 , 736.1}, {55 , 740.1}, {60 , 744}, {65 , 747.9}, {70 , 751.8}, {75 , 755.7}, {80 , 759.6}, {85 , 763.6}, {90 , 767.5} }}
                };
            }

            if (dx == null || dx.Count + 1 < _cDimention)
                return 0;

            List<double> virtual_X = new List<double>();
            List<double> virtual_Z = new List<double>();

            foreach (var item_X in dx)
            {
                double[] y = item_X.Value.Keys.ToArray();
                double[] z = item_X.Value.Values.ToArray();

                var polynom = Fit.PolynomialFunc(y, z, _cDimention);
                virtual_Z.Add(polynom(wetGasTemperature));
                virtual_X.Add(item_X.Key);
            }

            double searchItem = virtual_X.FirstOrDefault(x => x > wetGasPressure);
            int index = Array.IndexOf(virtual_X.ToArray(), searchItem);
            int workIndex = index == 0 ? 1 : index;

            double[] cor_virtual_X = new double[2];
            double[] cor_virtual_Z = new double[2];

            cor_virtual_X[0] = virtual_X[workIndex - 1];
            cor_virtual_X[1] = virtual_X[workIndex];
            cor_virtual_Z[0] = virtual_Z[workIndex - 1];
            cor_virtual_Z[1] = virtual_Z[workIndex];

            var virtual_polynom = Fit.PowerFunc(cor_virtual_X, cor_virtual_Z);

            return virtual_polynom(wetGasPressure);
        }

        /// <summary>
        /// Метод для расчета давления газа при температуре кипения.
        /// </summary>
        /// <param name="freonName">Название фреона.</param>
        /// <param name="saturatedGasTemperature">Температура кипения.</param>
        /// <returns>Давление газа.</returns>
        public static double CalculateSaturatedGasPressure(string freonName, double saturatedGasTemperature)
        {
            double[] X = null, Y = null;

            if (freonName == "R407C")
            {
                X = new double[] { -50, -40, -30, -20, -10, 0, 10, 20 };
                Y = new double[] { 0.505, 0.861, 1.392, 2.153, 3.204, 4.611, 6.448, 8.796 };
            }
            if (freonName == "R404A")
            {
                X = new double[] { -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20 };
                Y = new double[] { 0.823, 1.052, 1.327, 1.656, 2.045, 2.5, 3.03, 3.642, 4.342, 5.14, 6.043, 7.061, 8.201, 9.473, 10.89 };
            }
            if (freonName == "R507A")
            {
                X = new double[] { -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20 };
                Y = new double[] { 0.88, 1.119, 1.408, 1.751, 2.156, 2.63, 3.179, 3.813, 4.538, 5.363, 6.295, 7.344, 8.518, 9.826, 11.28 };
            }
            if (freonName == "R410A")
            {
                X = new double[] { -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20 };
                Y = new double[] { 1.095, 1.396, 1.759, 2.191, 2.702, 3.301, 3.998, 4.802, 5.724, 6.775, 7.967, 9.311, 10.82, 12.51, 14.38 };
            }
            if (freonName == "R22")
            {
                X = new double[] { -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20 };
                Y = new double[] { 0.644, 0.827, 1.049, 1.316, 1.634, 2.009, 2.447, 2.956, 3.542, 4.212, 4.974, 5.836, 6.805, 7.889, 9.097 };
            }
            if (freonName == "R134A")
            {
                X = new double[] { -50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20 };
                Y = new double[] { 0.295, 0.391, 0.512, 0.661, 0.844, 1.064, 1.327, 1.64, 2.006, 2.434, 2.929, 3.498, 4.147, 4.885, 5.718 };
            }

            var f = X != null && Y != null && X.Length > _cDimention3 ? Fit.PolynomialFunc(X, Y, _cDimention3) : null;

            return f != null ? f(saturatedGasTemperature) : 0;
        }

        public static double MSEN(double[] y, double[] y_, int n) /// Среднеквадратичная ошибка 
        {
            /// y - фактическая координата (в нашем случае - табличное значение), y_ - предсказанная координата (в нашем случае рез. работы полинома), n - количество точек 
            double MSE = 0;
            for (int i = 0; i < n; i++)
            {
                MSE += Math.Pow((y[i] - y_[i]), 2);
            }
            return MSE / (n);
        }

        public static double R2N(double[] y, double[] y_,int n) /// Коэффициент детерминации
        {
            /// y - фактическая координата (в нашем случае - табличное значение), y_ - предсказанная координата (в нашем случае рез. работы полинома), n - количество точек 
            //R2 = 1 - SSres/SStot
            double SSres = 0;
            double SStot = 0;
            double y_sum = 0;
            for (int i = 0; i < n; i++)
            {
                y_sum += y[i];
            }
            y_sum /= n;
            for (int i = 0; i < n; i++)
            {
                SSres += Math.Pow((y[i] - y_[i]), 2);
                SStot += Math.Pow((y[i] - y_sum), 2);

            }
            return 1 - SSres / SStot;
        }


        public static Func<double, double> GetSpline(double[] x, double[] y)
        { 
            alglib.spline1dinterpolant s;
            alglib.spline1dfitreport rep;
            alglib.spline1dfit(x, y, 50, 0.000001, out s, out rep);
            Func<double, double> f = a => alglib.spline1dcalc(s, a);

            return f;
        }


        public static double[] returnYN(double[] X, double[] Y, int n, int dim)/// приближенме функции полиномом второго порядка
        {
            List<double> virtual_Z = new List<double>();


            for (int i = 0; i < n; i++)
            { 
                var polynom = Fit.PolynomialFunc(X, Y, dim);
                virtual_Z.Add(polynom(X[i]));
            }

            return virtual_Z.ToArray();
        }


        static void Main(string[] args)
            {
                FileInfo newFile = new FileInfo(@"d:\graph.xlsx");
                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(@"d:\graph.xlsx");
                }
            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("graph");
                worksheet.Cells.Style.WrapText = true;

                worksheet.Cells[1, 1].Value = "X";
                worksheet.Cells[1, 2].Value = "Табличн.";
                worksheet.Cells[1, 3].Value = "Полином";
                worksheet.Cells[1, 4].Value = "MSE";
                worksheet.Cells[1, 5].Value = "R2";
                var X = new double[] { -50.0, -45.0, -40.0, -35.0, -30.0, -25.0, -20.0, -15.0, -10.0, -5.0, 0.0, 5.0, 10.0, 15.0, 20.0 };
                var Y = new double[] { 0.295, 0.391, 0.512, 0.661, 0.844, 1.064, 1.327, 1.64, 2.006, 2.434, 2.929, 3.498, 4.147, 4.885, 5.718 };

                var Y1 = new double[] { 0.88, 1.119, 1.408, 1.751, 2.156, 2.63, 3.179, 3.813, 4.538, 5.363, 6.295, 7.344, 8.518, 9.826, 11.28 };

                var Y2 = new double[] { 1.095, 1.396, 1.759, 2.191, 2.702, 3.301, 3.998, 4.802, 5.724, 6.775, 7.967, 9.311, 10.82, 12.51, 14.38 };

                var Y3 = new double[] { 0.644, 0.827, 1.049, 1.316, 1.634, 2.009, 2.447, 2.956, 3.542, 4.212, 4.974, 5.836, 6.805, 7.889, 9.097 };

                var Y4 = new double[] { 0.295, 0.391, 0.512, 0.661, 0.844, 1.064, 1.327, 1.64, 2.006, 2.434, 2.929, 3.498, 4.147, 4.885, 5.718 };
                
                var y = new double[15];

                ////  Расчет и вывод результатов работы метода CalculateSaturatedGasPressure 
                ////  Аппроксимация полиномом 3 порядка
                

                double[] y_ = new double[15];
                y_ = returnYN(X, Y, 15, 3);
                for (int i = 2; i < 17; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i-2];
                    worksheet.Cells[i, 2].Value = Y[i-2];
                    worksheet.Cells[i, 3].Value = y_[i-2];
                }
                worksheet.Cells[2, 4].Value = MSEN(Y, y_, 15);
                worksheet.Cells[2, 5].Value = R2N(Y, y_, 15);
                y_ = returnYN(X, Y1, 15, 3);
                for (int i = 20; i < 35; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i - 20];
                    worksheet.Cells[i, 2].Value = Y1[i - 20];
                    worksheet.Cells[i, 3].Value = y_[i - 20];
                }
                worksheet.Cells[20, 4].Value = MSEN(Y1, y_, 15);
                worksheet.Cells[20, 5].Value = R2N(Y1, y_, 15);
                y_ = returnYN(X, Y2, 15, 3);
   
                for (int i = 40; i < 55; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i - 40];
                    worksheet.Cells[i, 2].Value = Y2[i - 40];
                    worksheet.Cells[i, 3].Value =y_[i - 40];
                }
                worksheet.Cells[40, 4].Value = MSEN(Y2, y_, 15);
                worksheet.Cells[40, 5].Value = R2N(Y2, y_, 15);
                y_ = returnYN(X, Y3, 15, 3);
                for (int i = 60; i < 75; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i - 60];
                    worksheet.Cells[i, 2].Value = Y3[i - 60];
                    worksheet.Cells[i, 3].Value =y_[i - 60];
                }
                worksheet.Cells[60, 4].Value = MSEN(Y3, y_, 15);
                worksheet.Cells[60, 5].Value = R2N(Y3, y_, 15);
                y_ = returnYN(X, Y4, 15, 3);

                for (int i = 80; i < 95; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i - 80];
                    worksheet.Cells[i, 2].Value = Y4[i - 80];
                    worksheet.Cells[i, 3].Value =y_[i - 80];
                }
                worksheet.Cells[80, 4].Value = MSEN(Y4, y_, 15);
                worksheet.Cells[80, 5].Value = R2N(Y4, y_, 15);


                ///////////////////////////////////////////////////////////////////////////////////////////////////////////
                ////  Расчет и вывод результатов работы метода CalculateSaturatedLiquidEnthalpy
                ////  Аппроксимация полиномом 2 порядка

                double[] ny_ = new double[47];
                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22.5, 25, 27.5, 30, 32.5, 35, 37.5, 40, 42.5, 45, 47.5, 50, 52.5, 55, 57.5, 60 };

                Y = new double[] { 149.646, 152.142, 154.645, 157.154, 159.669, 162.191, 164.721, 167.257, 169.8, 172.351, 174.909, 177.474, 180.047, 182.628, 185.217, 187.814, 190.419, 193.033, 195.656, 198.287, 200.927, 203.577, 206.236, 208.904, 211.583, 214.272, 216.971, 219.681, 222.402, 225.135, 227.9, 231.4, 235, 238.7, 242.3, 246, 249.7, 253.4, 257.2, 261, 264.8, 268.6, 272.5, 276.4, 280.4, 284.4, 288.4 };

                Y1 = new double[] { 148.3677149, 150.8768338, 153.3936417, 155.9183836, 158.4513055, 160.9926558, 163.5426865, 166.1016547, 168.6698237, 171.2474645, 173.8348567, 176.4322903, 179.0400669, 181.6585013, 184.2879226, 186.9286768, 189.5811276, 192.2456592, 194.9226781, 197.6126154, 200.31593, 203.0331108, 205.764681, 208.5112011, 211.2732734, 214.0515473, 216.8467244, 219.6595652, 222.4908963, 225.3416194, 228.7, 232.4, 236.2, 240, 243.9, 247.9, 251.9, 255.9, 260, 264.2, 268.5, 272.9, 277.4, 282, 286.8, 291.8, 297 };

                Y2 = new double[] { 148.6767147, 151.1667829, 153.6647218, 156.1707731, 158.6851794, 161.2081859, 163.740041, 166.2809988, 168.8313197, 171.3912721, 173.9611337, 176.5411933, 179.1317517, 181.7331239, 184.3456402, 186.9696486, 189.6055162, 192.2536317, 194.9144076, 197.5882825, 200.2757248, 202.9772347, 205.693349, 208.4246443, 211.1717422, 213.9353145, 216.7160889, 219.5148567, 222.3324804, 225.1699037, 228.8, 232.5, 236.3, 240.1, 244, 247.9, 251.9, 255.9, 260, 264.2, 268.5, 272.9, 277.4, 282.1, 287, 292.2, 297.8 };

                Y3 = new double[] { 143.8009149, 146.542833, 149.2911182, 152.0461327, 154.8082486, 157.5778479, 160.3553232, 163.1410788, 165.9355314, 168.7391106, 171.5522608, 174.3754413, 177.2091282, 180.0538157, 182.9100175, 185.7782683, 188.6591263, 191.5531746, 194.4610243, 197.3833165, 200.3207258, 203.2739635, 206.2437817, 209.2309774, 212.2363981, 215.2609471, 218.3055907, 221.3713661, 224.4593902, 227.5708711, 231.3, 235.4, 239.5, 243.7, 248, 252.3, 256.7, 261.2, 265.7, 270.4, 275.2, 280, 285.1, 290.3, 295.7, 301.3, 307.3 };

                Y4 = new double[] { 156.709517, 158.8702616, 161.0354732, 163.2053702, 165.3801715, 167.5600967, 169.745366, 171.9362004, 174.132822, 176.3354536, 178.5443195, 180.7596455, 182.9816592, 185.2105903, 187.4466714, 189.6901379, 191.9412289, 194.2001878, 196.4672627, 198.7427075, 201.0267825, 203.3197554, 205.6219023, 207.933509, 210.2548721, 212.5863005, 214.9281172, 217.2806606, 219.644287, 222.0193724, 524, 527.1, 530.3, 533.4, 536.6, 539.8, 543, 546.3, 549.6, 552.9, 556.3, 559.7, 563.1, 566.6, 570.1, 573.7, 577.4 };
                
                int count = 0;
                ny_ = returnYN(X, Y, 47, 2);
                //for (int i = 2; i < 49; i++)
                //{
                //    Console.WriteLine(ny_[i-2]);
                //}
                for (int i = 2; i < 49; i++)
                {
                    worksheet.Cells[i, 21].Value = X[i-2];
                    worksheet.Cells[i, 22].Value = Y[i-2];
                    worksheet.Cells[i, 23].Value = ny_[i - 2];
                }
                worksheet.Cells[2, 24].Value = MSEN(Y, ny_, 47);
                worksheet.Cells[2, 25].Value = R2N(Y, ny_, 47);
                ny_ = returnYN(X, Y1, 47, 2);
                for (int i = 50; i < 97; i++)
                {
                    worksheet.Cells[i, 21].Value = X[i - 50];
                    worksheet.Cells[i, 22].Value = Y1[i - 50];
                    worksheet.Cells[i, 23].Value = ny_[i - 50];
                }
                worksheet.Cells[50, 24].Value = MSEN(Y1, ny_, 47);
                worksheet.Cells[50, 25].Value = R2N(Y1, ny_, 47);
                ny_ = returnYN(X, Y2, 47, 2);
                
                for (int i = 100; i < 147; i++)
                {
                    worksheet.Cells[i, 21].Value = X[i - 100];
                    worksheet.Cells[i, 22].Value = Y2[i - 100];
                    worksheet.Cells[i, 23].Value = ny_[i - 100];
                }
                worksheet.Cells[100, 24].Value = MSEN(Y2, ny_, 47);
                worksheet.Cells[100, 25].Value = R2N(Y2, ny_, 47);
                ny_ = returnYN(X, Y3, 47, 2);
                for (int i = 150; i < 197; i++)
                {
                    worksheet.Cells[i, 21].Value = X[i - 150];
                    worksheet.Cells[i, 22].Value = Y3[i - 150];
                    worksheet.Cells[i, 23].Value = ny_[i - 150];
                }
                worksheet.Cells[150, 24].Value = MSEN(Y3, ny_, 47);
                worksheet.Cells[150, 25].Value = R2N(Y3, ny_, 47);
                ny_ = returnYN(X, Y4, 47, 2);
                var x = new List<double>();
                double v;
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                alglib.spline1dinterpolant s;
                alglib.spline1dfitreport rep;
                alglib.spline1dfit(X, Y4, 50, 0.000001, out s, out rep);
                
                v = alglib.spline1dcalc(s, 0.0);
                
                for (int i = 200; i < 247; i++)
                {
                    worksheet.Cells[i, 21].Value = X[i - 200];
                    worksheet.Cells[i, 22].Value = Y4[i - 200];
                    worksheet.Cells[i, 23].Value = ny_[i - 200];
                    worksheet.Cells[i, 26].Value = alglib.spline1dcalc(s, X[i - 200]);
                    x.Add(alglib.spline1dcalc(s, X[i - 200]));
                }
                worksheet.Cells[200, 24].Value = MSEN(Y4, ny_, 47);
                worksheet.Cells[200, 25].Value = R2N(Y4, ny_, 47);
                worksheet.Cells[201, 24].Value = MSEN(Y4, x.ToArray(), 47);
                worksheet.Cells[201, 25].Value = R2N(Y4, x.ToArray(), 47);
                //Console.WriteLine(MSEN(Y4, x.ToArray(), 47));
                //Console.WriteLine(R2N(Y4, x.ToArray(), 47));
                X = new double[] { -50, -40, -30, -20, -10, 0, 10, 20 };
                Y = new double[] { 0.505, 0.861, 1.392, 2.153, 3.204, 4.611, 6.448, 8.796 };

                ny_ = returnYN(X, Y, 8, 3);
                for(int i = 100; i < 108; i++)
                {
                    worksheet.Cells[i, 1].Value = X[i - 100];
                    worksheet.Cells[i, 2].Value = Y[i - 100];
                    worksheet.Cells[i, 3].Value = ny_[i - 100];
                }
                worksheet.Cells[100, 4].Value = MSEN(Y, ny_, 8);
                worksheet.Cells[100, 5].Value = R2N(Y, ny_, 8);

                X = new double[] { -40, -38, -36, -34, -32, -30, -28, -26, -24, -22, -20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 25, 30, 35, 40, 45, 50, 55, 60 };  // 39
                Y = new double[] { 147.0514881, 149.6662976, 152.2868033, 154.9132284, 157.545798, 160.1847407, 162.8302888, 165.4826795, 168.1421559, 170.8089673, 173.4833705, 176.1656307, 178.8560217, 181.5548275, 184.2623429, 186.9788744, 189.7047416, 192.4402776, 195.1858311, 197.9417669, 200.7084678, 203.4863359, 206.2757946, 209.07729, 211.8912934, 214.7183037, 217.5588494, 220.4134926, 223.282831, 226.1675029, 229, 236.6, 244.3, 252.1, 260.2, 268.4, 276.9, 285.7, 294.8 };

                ny_ = returnYN(X, Y, 39, 2);
                for (int i = 250; i < 289; i++)
                {
                    Console.WriteLine(CalculateSaturatedLiquidEnthalpy("R407C", X[i - 250]));
                    worksheet.Cells[i, 21].Value = X[i - 250];
                    worksheet.Cells[i, 22].Value = Y[i - 250];
                    worksheet.Cells[i, 23].Value = ny_[i - 250];
                }
                worksheet.Cells[250, 24].Value = MSEN(Y, ny_, 39);
                worksheet.Cells[250, 25].Value = R2N(Y, ny_, 39);


                ////////////////////////////////////////////////////////////////////////////////////////////////////
                //// Создание графиков для всех полученых данных 
                
                ExcelChart chart = worksheet.Drawings.AddChart("chart1", eChartType.Line);

                ExcelChartSerie table = chart.Series.Add(worksheet.Cells[2, 2, 16, 2], worksheet.Cells[2, 1, 16, 1]);
                ExcelChartSerie poly = chart.Series.Add(worksheet.Cells[2, 3, 16, 3], worksheet.Cells[2, 1, 16, 1]);
                table.HeaderAddress = worksheet.Cells[1, 2];
                poly.HeaderAddress = worksheet.Cells[1, 3];
                

                chart.SetPosition(0, 350);
                chart.SetSize(800, 350);
                chart.Title.Text = "Сравнение";
                chart.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart.Title.Font.Size = 15;
                chart.Title.Font.Bold = true;
                chart.Style = eChartStyle.Style15;
                chart.Legend.Border.LineStyle = eLineStyle.Solid;
                chart.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);

                ExcelChart chart1 = worksheet.Drawings.AddChart("chart2", eChartType.Line);

                ExcelChartSerie table1 = chart1.Series.Add(worksheet.Cells[20, 2, 34, 2], worksheet.Cells[2, 1, 16, 1]);
                ExcelChartSerie poly1 = chart1.Series.Add(worksheet.Cells[20, 3, 34, 3], worksheet.Cells[2, 1, 16, 1]);
                table1.HeaderAddress = worksheet.Cells[1, 2];
                poly1.HeaderAddress = worksheet.Cells[1, 3];


                chart1.SetPosition(400, 350);
                chart1.SetSize(800, 350);
                chart1.Title.Text = "Сравнение";
                chart1.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart1.Title.Font.Size = 15;
                chart1.Title.Font.Bold = true;
                chart1.Style = eChartStyle.Style15;
                chart1.Legend.Border.LineStyle = eLineStyle.Solid;
                chart1.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);


                ExcelChart chart2 = worksheet.Drawings.AddChart("chart3", eChartType.Line);

                ExcelChartSerie table2 = chart2.Series.Add(worksheet.Cells[40, 2, 54, 2], worksheet.Cells[2, 1, 16, 1]);
                ExcelChartSerie poly2 = chart2.Series.Add(worksheet.Cells[40, 3, 54, 3], worksheet.Cells[2, 1, 16, 1]);
                table2.HeaderAddress = worksheet.Cells[1, 2];
                poly2.HeaderAddress = worksheet.Cells[1, 3];


                chart2.SetPosition(800, 350);
                chart2.SetSize(800, 350);
                chart2.Title.Text = "Сравнение";
                chart2.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart2.Title.Font.Size = 15;
                chart2.Title.Font.Bold = true;
                chart2.Style = eChartStyle.Style15;
                chart2.Legend.Border.LineStyle = eLineStyle.Solid;
                chart2.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);

                
                ExcelChart chart3 = worksheet.Drawings.AddChart("chart4", eChartType.Line);
                
                ExcelChartSerie table3 = chart3.Series.Add(worksheet.Cells[60, 2, 74, 2], worksheet.Cells[2, 1, 16, 1]);
                ExcelChartSerie poly3 = chart3.Series.Add(worksheet.Cells[60, 3, 74, 3], worksheet.Cells[2, 1, 16, 1]);
                table3.HeaderAddress = worksheet.Cells[1, 2];
                poly3.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart3.SetPosition(1200, 350);
                chart3.SetSize(800, 350);
                chart3.Title.Text = "Сравнение";
                chart3.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart3.Title.Font.Size = 15;
                chart3.Title.Font.Bold = true;
                chart3.Style = eChartStyle.Style15;
                chart3.Legend.Border.LineStyle = eLineStyle.Solid;
                chart3.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                
                
                ExcelChart chart4 = worksheet.Drawings.AddChart("chart5", eChartType.Line);
                
                ExcelChartSerie table4 = chart4.Series.Add(worksheet.Cells[80, 2, 94, 2], worksheet.Cells[2, 1, 16, 1]);
                ExcelChartSerie poly4 = chart4.Series.Add(worksheet.Cells[80, 3, 94, 3], worksheet.Cells[2, 1, 16, 1]);
                table4.HeaderAddress = worksheet.Cells[1, 2];
                poly4.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart4.SetPosition(1600, 350);
                chart4.SetSize(800, 350);
                chart4.Title.Text = "Сравнение";
                chart4.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart4.Title.Font.Size = 15;
                chart4.Title.Font.Bold = true;
                chart4.Style = eChartStyle.Style15;
                chart4.Legend.Border.LineStyle = eLineStyle.Solid;
                chart4.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                
                ExcelChart chart5 = worksheet.Drawings.AddChart("chart6", eChartType.Line);
                
                ExcelChartSerie table5 = chart5.Series.Add(worksheet.Cells[100, 2, 107, 2], worksheet.Cells[100, 1, 107, 1]);
                ExcelChartSerie poly5 = chart5.Series.Add(worksheet.Cells[100, 3, 107, 3], worksheet.Cells[100, 1, 107, 1]);
                table5.HeaderAddress = worksheet.Cells[1, 2];
                poly5.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart5.SetPosition(2000, 350);
                chart5.SetSize(800, 350);
                chart5.Title.Text = "Сравнение";
                chart5.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart5.Title.Font.Size = 15;
                chart5.Title.Font.Bold = true;
                chart5.Style = eChartStyle.Style15;
                chart5.Legend.Border.LineStyle = eLineStyle.Solid;
                chart5.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                
                
                ExcelChart chart6 = worksheet.Drawings.AddChart("chart7", eChartType.Line);
                
                ExcelChartSerie table6 = chart6.Series.Add(worksheet.Cells[2, 22, 48, 22], worksheet.Cells[2, 21, 48, 21]);
                ExcelChartSerie poly6 = chart6.Series.Add(worksheet.Cells[2, 23, 48, 23], worksheet.Cells[2, 21, 48, 21]);
                table6.HeaderAddress = worksheet.Cells[1, 2];
                poly6.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart6.SetPosition(0, 1600);
                chart6.SetSize(800, 350);
                chart6.Title.Text = "Сравнение";
                chart6.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart6.Title.Font.Size = 15;
                chart6.Title.Font.Bold = true;
                chart6.Style = eChartStyle.Style15;
                chart6.Legend.Border.LineStyle = eLineStyle.Solid;
                chart6.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                
                ExcelChart chart7 = worksheet.Drawings.AddChart("chart8", eChartType.Line);
                
                ExcelChartSerie table7 = chart7.Series.Add(worksheet.Cells[50, 22, 96, 22], worksheet.Cells[2, 21, 48, 21]);
                ExcelChartSerie poly7 = chart7.Series.Add(worksheet.Cells[50, 23, 96, 23], worksheet.Cells[2, 21, 48, 21]);
                table7.HeaderAddress = worksheet.Cells[1, 2];
                poly7.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart7.SetPosition(1200, 1600);
                chart7.SetSize(800, 350);
                chart7.Title.Text = "Сравнение";
                chart7.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart7.Title.Font.Size = 15;
                chart7.Title.Font.Bold = true;
                chart7.Style = eChartStyle.Style15;
                chart7.Legend.Border.LineStyle = eLineStyle.Solid;
                chart7.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                
                ExcelChart chart8 = worksheet.Drawings.AddChart("chart9", eChartType.Line);
                
                ExcelChartSerie table8 = chart8.Series.Add(worksheet.Cells[100, 22, 146, 22], worksheet.Cells[2, 21, 48, 21]);
                ExcelChartSerie poly8 = chart8.Series.Add(worksheet.Cells[100, 23, 146, 23], worksheet.Cells[2, 21, 48, 21]);
                table8.HeaderAddress = worksheet.Cells[1, 2];
                poly8.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart8.SetPosition(2400, 1600);
                chart8.SetSize(800, 350);
                chart8.Title.Text = "Сравнение";
                chart8.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart8.Title.Font.Size = 15;
                chart8.Title.Font.Bold = true;
                chart8.Style = eChartStyle.Style15;
                chart8.Legend.Border.LineStyle = eLineStyle.Solid;
                chart8.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                ExcelChart chart9 = worksheet.Drawings.AddChart("chart10", eChartType.Line);
                
                ExcelChartSerie table9 = chart9.Series.Add(worksheet.Cells[150, 22, 196, 22], worksheet.Cells[2, 21, 48, 21]);
                ExcelChartSerie poly9 = chart9.Series.Add(worksheet.Cells[150, 23, 196, 23], worksheet.Cells[2, 21, 48, 21]);
                table9.HeaderAddress = worksheet.Cells[1, 2];
                poly9.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart9.SetPosition(3000, 1600);
                chart9.SetSize(800, 350);
                chart9.Title.Text = "Сравнение";
                chart9.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart9.Title.Font.Size = 15;
                chart9.Title.Font.Bold = true;
                chart9.Style = eChartStyle.Style15;
                chart9.Legend.Border.LineStyle = eLineStyle.Solid;
                chart9.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                ExcelChart chart10 = worksheet.Drawings.AddChart("chart11", eChartType.Line);
                
                ExcelChartSerie table10 = chart10.Series.Add(worksheet.Cells[200, 22, 246, 22], worksheet.Cells[2, 21, 48, 21]);
                ExcelChartSerie poly10 = chart10.Series.Add(worksheet.Cells[200, 23, 246, 23], worksheet.Cells[2, 21, 48, 21]);
                table10.HeaderAddress = worksheet.Cells[1, 2];
                poly10.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart10.SetPosition(4000, 1600);
                chart10.SetSize(800, 350);
                chart10.Title.Text = "Сравнение";
                chart10.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart10.Title.Font.Size = 15;
                chart10.Title.Font.Bold = true;
                chart10.Style = eChartStyle.Style15;
                chart10.Legend.Border.LineStyle = eLineStyle.Solid;
                chart10.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);
                
                ExcelChart chart11 = worksheet.Drawings.AddChart("chart12", eChartType.Line);
                
                ExcelChartSerie table11 = chart11.Series.Add(worksheet.Cells[250, 22, 288, 22], worksheet.Cells[250, 21, 288, 21]);
                ExcelChartSerie poly11 = chart11.Series.Add(worksheet.Cells[250, 23, 288, 23], worksheet.Cells[250, 21, 288, 21]);
                table11.HeaderAddress = worksheet.Cells[1, 2];
                poly11.HeaderAddress = worksheet.Cells[1, 3];
                
                
                chart11.SetPosition(5000, 1600);
                chart11.SetSize(800, 350);
                chart11.Title.Text = "Сравнение";
                chart11.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart11.Title.Font.Size = 15;
                chart11.Title.Font.Bold = true;
                chart11.Style = eChartStyle.Style15;
                chart11.Legend.Border.LineStyle = eLineStyle.Solid;
                chart11.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);

                ExcelChart chart12 = worksheet.Drawings.AddChart("chart13", eChartType.Line);

                ExcelChartSerie table12 = chart12.Series.Add(worksheet.Cells[200, 22, 246, 22], worksheet.Cells[200, 21, 246, 21]);
                ExcelChartSerie poly12 = chart12.Series.Add(worksheet.Cells[200, 26, 246, 26], worksheet.Cells[200, 21, 246, 21]);
                table12.HeaderAddress = worksheet.Cells[1, 2];
                poly12.HeaderAddress = worksheet.Cells[1, 3];


                chart12.SetPosition(4400, 1600);
                chart12.SetSize(800, 350);
                chart12.Title.Text = "alglibint";
                chart12.Title.Font.Color = Color.FromArgb(89, 89, 89);
                chart12.Title.Font.Size = 15;
                chart12.Title.Font.Bold = true;
                chart12.Style = eChartStyle.Style15;
                chart12.Legend.Border.LineStyle = eLineStyle.Solid;
                chart12.Legend.Border.Fill.Color = Color.FromArgb(217, 217, 217);

                package.Save();

                }
        
            }
    }
}
